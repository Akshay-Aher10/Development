#include<stdio.h>
#include<stdlib.h>

struct node
{
	int data;
	struct node* next;
	
};

typedef struct node NODE;
typedef struct node* PNODE;
typedef struct node** PPNODE;


void Display(PNODE head)
{
	printf("Nodes in LinkedList :\n");
	
	while(head != NULL)
	{
		printf("|%d|->", head->data);
		head = head->next;
	}
	printf("NULL\n");
}

int Count(PNODE head)
{
	int iCnt=0;
	
	while(head != NULL)
	{
		iCnt++;
		head = head->next;
	}
	
	return iCnt;
}

void InsertFirst(PPNODE head, int no)
{
	PNODE newn = NULL;
	
	newn =(PNODE)malloc(sizeof(NODE));
	
	newn -> data = no;
	newn -> next = NULL;
	
	if(*head == NULL)
	{
		*head = newn;
	}
	else
	{
		newn->next = *head;
		*head = newn;
	}
}

void InsertLast(PPNODE head, int no)
{	
	PNODE newn = NULL;
	PNODE temp = NULL;
	
	newn =(PNODE)malloc(sizeof(NODE));
	
	newn -> data = no;
	newn -> next = NULL;
	
	if(*head == NULL)
	{
		*head = newn;
	}
	else
	{
		temp = *head;
		
		while(temp->next != NULL)
		{
			temp = temp->next;
		}
		
		temp->next = newn;
	
	}
}

void DeleteFirst(PPNODE head)
{
	PNODE temp = NULL;
	
	if(*head == NULL)
	{
		return;
	}
	
	if((*head) -> next == NULL)
	{
		free(*head);
		*head = NULL;
	}
	else
	{
		temp =*head;
		
		*head = temp->next;
		
		free(temp);
	}
}

void DeleteLast(PPNODE head)
{	
	PNODE temp = NULL;
	
	if(*head == NULL)
	{
		return;
	}
	
	if((*head) -> next == NULL)
	{
		free(*head);
		*head = NULL;
	}
	else
	{
		temp =*head;
		
		while(temp->next->next != NULL)
		{
			temp = temp->next;
		}
		
		free(temp->next);
		temp->next = NULL;
		
	}
}

void InsertAtPos(PPNODE head, int no, int pos)
{
	PNODE temp =NULL;
	PNODE newn = NULL;
	
	int iCnt =0;
	
	int size = 0;
	
	size = Count(*head);
	
	if( (pos<1) || (pos>(size+1)) )
	{
		printf("Position is invalid\n");
	}
	
	if(pos == 1)
	{
		InsertFirst(head,no);
	}
	else if(pos ==(size+1))
	{
		InsertLast(head,no);
	}
	else
	{
		newn =(PNODE)malloc(sizeof(NODE));
	
		newn -> data = no;
		newn -> next = NULL;
		
		temp = *head;
		
		for( iCnt=1 ; iCnt<(pos-1) ; iCnt++)
		{
			temp = temp->next;
		}
		
		newn->next = temp->next;
		temp->next = newn;
		
	}
}

void DeleteAtPos(PPNODE head, int pos)
{
	PNODE temp =NULL;
	PNODE tempDelete =NULL;
	
	int iCnt =0;
	int size = 0;
	
	size = Count(*head);
	
	if( (pos<1) || (pos>(size)) )
	{
		printf("Position is invalid\n");
	}
	
	if(pos == 1)
	{
		DeleteFirst(head);
	}
	else if(pos ==(size))
	{
		DeleteLast(head);
	}
	else
	{
		temp = *head;
		
		for( iCnt=1 ; iCnt<(pos-1) ; iCnt++)
		{
			temp = temp->next;
		}
		
		tempDelete = temp->next;
		
		temp->next = temp->next->next;
		
		free(tempDelete);
		
	}
}

int main()
{
	PNODE first = NULL;
	
	int ret=0;
	
	InsertFirst(&first,20);
	InsertFirst(&first,10);
	
	InsertLast(&first,30);
	InsertLast(&first,40);
	
	Display(first);
	ret = Count(first);
	printf("Number of Nodes : %d\n",ret);
	
	DeleteFirst(&first);
	DeleteLast(&first);
	
	Display(first);
	ret = Count(first);
	printf("Number of Nodes : %d\n",ret);
	
	DeleteAtPos(&first,2);
	
	Display(first);
	ret = Count(first);
	printf("Number of Nodes : %d\n",ret);
	
	InsertAtPos(&first,50,2);
	
	Display(first);
	ret = Count(first);
	printf("Number of Nodes : %d\n",ret);
	
	
	return 0;
	
}